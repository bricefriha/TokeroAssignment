// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Core.Data;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPI.Data.Balance", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<double?>("AmountToken")
                        .HasColumnType("float");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserDataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("TokenId");

                    b.HasIndex("UserDataId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("WebAPI.Data.DcaSetup", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<double?>("Changes")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PriceUsd")
                        .HasColumnType("float");

                    b.Property<Guid>("UserDataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("UserDataId");

                    b.ToTable("Setups");
                });

            modelBuilder.Entity("WebAPI.Data.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("Tokenid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserDataid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Tokenid");

                    b.HasIndex("UserDataid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebAPI.Data.Token", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("CmcId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("WebAPI.Data.TokenShare", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateSetup")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DcaSetupid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("FixAmountUSD")
                        .HasColumnType("float");

                    b.Property<double?>("Pourcentage")
                        .HasColumnType("float");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("DcaSetupid");

                    b.HasIndex("TokenId");

                    b.ToTable("TokenShares");
                });

            modelBuilder.Entity("WebAPI.Data.UserData", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("WebAPI.Data.Balance", b =>
                {
                    b.HasOne("WebAPI.Data.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.UserData", "UserData")
                        .WithMany("Balances")
                        .HasForeignKey("UserDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("WebAPI.Data.DcaSetup", b =>
                {
                    b.HasOne("WebAPI.Data.UserData", "UserData")
                        .WithMany("Shares")
                        .HasForeignKey("UserDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("WebAPI.Data.Order", b =>
                {
                    b.HasOne("WebAPI.Data.Token", "Token")
                        .WithMany()
                        .HasForeignKey("Tokenid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Data.UserData", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserDataid");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("WebAPI.Data.TokenShare", b =>
                {
                    b.HasOne("WebAPI.Data.DcaSetup", null)
                        .WithMany("Shares")
                        .HasForeignKey("DcaSetupid");

                    b.HasOne("WebAPI.Data.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("WebAPI.Data.DcaSetup", b =>
                {
                    b.Navigation("Shares");
                });

            modelBuilder.Entity("WebAPI.Data.UserData", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("Orders");

                    b.Navigation("Shares");
                });
#pragma warning restore 612, 618
        }
    }
}
