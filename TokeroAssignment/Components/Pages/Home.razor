@using CoinMarketCap
@using CoinMarketCap.Models.Cryptocurrency
@using TokeroAssignment.Models
@using TokeroAssignment.Services
@using TokeroAssignment.ViewModels
@inject HomeViewModel vm
@inject CoinMarketCapClient client
@inject Fetcher fetcher
@page "/"

<PageTitle>Home</PageTitle>

<tbody>
    <h2 class="mb-4">Balance: @_userData?.Balances?.SingleOrDefault(b => b.Token.Symbol == "USDT").AmountToken USDT</h2>
    <h1 class="mb-4">📈 Current investments</h1>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Start Date</th>
                <th>Token</th>
                <th>Total Amount</th>
                <th>Current value</th>
                <th>% ROI</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var investment in _dcaInvestments)
            {
                <tr>
                    <td>@investment.DateStart.ToString("dd/MM/yyyy")</td>
                    <td>@investment.Token.Name (@investment.Token.Symbol)</td>
                    <td>@investment.AmountToken</td>
                    <td>$@Math.Round(investment.CurrentValue, 2)</td>
                    <td class="@(investment.PourcentageChange < 0 ? "text-danger" : "text-success")">@Math.Round(investment.PourcentageChange,2)%</td>
                </tr>
            }
        </tbody>
    </table>
    <br/>
    <h1 class="mb-4">📐 Your DCA setups </h1>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Date creation</th>
                <th>Tokens</th>
                <th>Trigger day of the month</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var setup in _dcaSetups)
            {
                <tr>
                    <td>@setup.CreatedAt</td>
                    <td>
                        @foreach (var share in setup.Shares)
                        {
                            <span class="badge badge-secondary mx-1"
                                  style="background-color: #e0e0e0; color: black;">• @share.Token.Name (@share.Token.Symbol) - @(share.FixAmountUSD is not null ? $"${share.FixAmountUSD}" : $"{share.Pourcentage}%")</span>
                        }
                    </td>
                    <td>@GetOrdinal(setup.CreatedAt.Date.Day)</td>
                </tr>
            }
        </tbody>
    </table>
</tbody>

@code {
    private List<Token> _tokens = [];
    private List<Investment> _dcaInvestments = [];
    private List<DcaSetup> _dcaSetups = [];
    private User _userData;

    protected override async Task OnInitializedAsync()
    {
        _tokens =  await fetcher.GetTokenFromCmc();
        _userData =  await fetcher.GetUserDataAsync();
        _dcaInvestments =  await fetcher.GetInvestmentsAsync();
        _dcaSetups =  await fetcher.GetDcaSetupAsync();
    }
    private static string GetOrdinal(int number)
    {
        if (number <= 0) return number.ToString();

        int rem100 = number % 100;
        int rem10 = number % 10;

        string suffix = rem100 switch
        {
            11 => "th",
            12 => "th",
            13 => "th",
            _ => rem10 switch
            {
                1 => "st",
                2 => "nd",
                3 => "rd",
                _ => "th"
            }
        };

        return $"{number}{suffix}";
    }
}