@using CoinMarketCap
@using CoinMarketCap.Models.Cryptocurrency
@using System.Collections.ObjectModel
@using TokeroAssignment.Models
@using TokeroAssignment.Services
@using TokeroAssignment.ViewModels
@inject HomeViewModel vm
@inject CoinMarketCapClient client
@inject Fetcher fetcher

@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

    <h2 class="mb-4">Balance: @_userData?.Balances?.SingleOrDefault(b => b.Token.Symbol == "USDT").AmountToken USDT</h2>
    <h1 class="mb-4">📈 Current investments</h1>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Start Date</th>
                <th>Token</th>
                <th>Total Amount</th>
                <th>Current value</th>
                <th>% ROI</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var investment in _dcaInvestments)
            {
                <tr>
                    <td>@investment.DateStart.ToString("dd/MM/yyyy")</td>
                    <td>@investment.Token.Name (@investment.Token.Symbol)</td>
                    <td>@investment.AmountToken</td>
                    <td>$@Math.Round(investment.CurrentValue, 2)</td>
                    <td class="@(investment.PourcentageChange < 0 ? "text-danger" : "text-success")">@Math.Round(investment.PourcentageChange,2)%</td>
                </tr>
            }
        </tbody>
    </table>
    <br/>
    <h1 class="mb-4">📐 Your DCA setups </h1>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Date creation</th>
                <th>Tokens</th>
                <th>Trigger day of the month</th>
                <th>Budget Allocation (USD)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var setup in _dcaSetups)
            {
                <tr>
                    <td>@setup.CreatedAt</td>
                    <td>
                        @foreach (var share in setup.Shares)
                        {
                            <span class="badge badge-secondary mx-1"
                                  style="background-color: #e0e0e0; color: black;">• @share.Token.Name (@share.Token.Symbol) - @(share.FixAmountUSD is not null ? $"${share.FixAmountUSD}" : $"{share.Pourcentage}%")</span>
                        }
                    </td>
                    <td>@GetOrdinal(setup.DayOfMonth)</td>
                <td>@(setup.AllocationAmountUSD is not null ? $"${setup.AllocationAmountUSD}" : "not set")</td>
                </tr>
            }
        </tbody>
</table>
<h1 class="mb-4">⚙️ Create New DCA Setup </h1>

    <EditForm Model="@newSetup" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-row">
        <div class="form-row align-items-end">
            <div class="form-group col-md-6">
                <label >Start Date</label>
                <InputDate @bind-Value="newSetup.CreatedAt"
                           class="form-control" />
            </div>

            <div class="form-group col-md-6">
                <label >Trigger day of the month</label>
                <InputNumber @bind-Value="newSetup.DayOfMonth"
                             class="form-control" />
            </div>
            <div class="form-group col-md-6">
                <label >Budget allocation in USD (optional)</label>
                <InputNumber @bind-Value="newSetup.AllocationAmountUSD"
                             class="form-control" />
            </div>
        </div>
        </div>
        <br />
            <div class="form-group">
            <label>Shares</label>
            <div class="border p-2 mb-2">
                @foreach (var share in newSetup.Shares)
                {
                        <div class="form-group">
                            <div class="row align-items-end">
                                <div class="col-md-4">
                        <label>Token</label>
                        <InputSelect @bind-Value:get="share.Token.Symbol"
                                     @bind-Value:set="(value) => 
                                     { 
                                         share.Token = _tokens!.SingleOrDefault(tk => tk.Symbol ==value?.ToString()); 
                                     }"
                                     
                                     class="form-control">
                            @foreach (var token in _tokens)
                            {
                                <option value="@token.Symbol">@token.Name (@token.Symbol)</option>
                            }
                        </InputSelect>
                        </div>
                        <div class="col-md-4">
                            <label>Amount</label>
                            <InputNumber @bind-Value="share.Pourcentage" class="form-control" />
                        </div>
                        <div class="col-md-4">
                            <InputSelect @bind-Value="share.IsFixedAmount" class="form-control" style="width: 50px;">
                                <option value="false">%</option>
                                <option value="true">usd</option>
                            </InputSelect>
                        </div>
                            </div>
                        </div>
            }
            <br />
            <button type="button"
                    class="btn btn-secondary"
                    @onclick="AddShare">
                + Add Share
                </button>
            </div>
            </div>
    <br />

        <button type="submit" class="btn btn-primary">Create Setup</button>
</EditForm>

@code {
    private List<Token> _tokens = [];
    private List<Investment> _dcaInvestments = [];
    private ObservableCollection<DcaSetup> _dcaSetups = [];
    private User _userData;
    private DcaSetup newSetup = new()
    {
        Shares = new ObservableCollection<TokenShare> { new TokenShare { Token = new Token() } }
    };

    protected override async Task OnInitializedAsync()
    {
        _tokens =  await fetcher.GetTokenFromCmc();
        _userData =  await fetcher.GetUserDataAsync();
        _dcaInvestments =  await fetcher.GetInvestmentsAsync();
        _dcaSetups =  new (await fetcher.GetDcaSetupAsync());
        ResetShareForm();
    }
    private static string GetOrdinal(int number)
    {
        if (number <= 0) return number.ToString();

        int rem100 = number % 100;
        int rem10 = number % 10;

        string suffix = rem100 switch
        {
            11 => "th",
            12 => "th",
            13 => "th",
            _ => rem10 switch
            {
                1 => "st",
                2 => "nd",
                3 => "rd",
                _ => "th"
            }
        };

        return $"{number}{suffix}";
    }
    private void HandleValidSubmit()
    {
        foreach (TokenShare share in newSetup.Shares)
        {
            // TODO: this is a patch, Ideally we want to redesign the data structure to allow both Fixed and percent amount
            if (share.IsFixedAmount)
            {
                share.FixAmountUSD = share.Pourcentage;
                share.Pourcentage = null;
            }
        }
        fetcher.InsertDcaSetupAsync(newSetup).GetAwaiter();

        _dcaSetups.Add(newSetup);
        ResetShareForm();
        Console.WriteLine("Setup created!");
    }

    public void AddShare()
    {
        newSetup.Shares.Add(new TokenShare { Token = new Token() });
    }

    public void ResetShareForm()
    {
        newSetup = new()
            {
                UserDataId = _userData.Id,
                Shares = new ObservableCollection<TokenShare> { new TokenShare { Token = _tokens.FirstOrDefault() } }
            };
    }
    
}